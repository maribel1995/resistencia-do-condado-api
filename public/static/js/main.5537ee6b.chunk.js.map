{"version":3,"sources":["Admin.js","App.js","serviceWorker.js","index.js"],"names":["Admin","useState","config","setConfig","status","setStatus","spyStatus","setSpyStatus","resistanceStatus","setResistanceStatus","useEffect","getCardStatus","handleChange","event","value","target","name","Number","axios","get","then","response","console","log","data","spy","count","resistance","catch","error","onSubmit","e","preventDefault","post","type","onChange","required","App","game","setGame","path","onClick","youAre","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"4TAkEeA,EA/DD,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACXC,EADW,KACHC,EADG,OAEUF,mBAAS,IAFnB,mBAEXG,EAFW,KAEHC,EAFG,OAGgBJ,mBAAS,kBAHzB,mBAGXK,EAHW,KAGAC,EAHA,OAI8BN,mBAAS,kBAJvC,mBAIXO,EAJW,KAIOC,EAJP,KAMlBC,qBAAU,WACRC,OAGF,IAAMC,EAAe,SAACC,GACpB,IAAMC,EAAQD,EAAME,OAAOD,MACrBE,EAAOH,EAAME,OAAOC,KAC1Bb,EAAU,eAAID,EAAL,eAAac,EAAOC,OAAOH,OAelCH,EAAgB,WACpBO,IACKC,IAAI,gEACJC,MAAK,SAASC,GAEbC,QAAQC,IAAIF,GACZd,EAAac,EAASG,KAAKC,IAAIC,OAC/BjB,EAAoBY,EAASG,KAAKG,WAAWD,UAE9CE,OAAM,SAASC,GAEdP,QAAQC,IAAIM,MAEbT,MAAK,gBAKV,OACE,6BACE,qCACA,0BAAOU,SAjCQ,SAACC,GACpBA,EAAEC,iBACFd,IACGe,KAAK,wDAAyD/B,GAC9DkB,MAAK,SAASC,GACbhB,EAAUgB,EAASG,KAAKpB,WAEzBwB,OAAM,SAASC,GACdP,QAAQC,IAAIM,QA0BV,8CACA,2BAAOK,KAAK,SAASlB,KAAK,WAAWmB,SAAUvB,EAAcwB,UAAQ,IACrE,+CACA,2BAAOF,KAAK,SAASlB,KAAK,kBAAkBmB,SAAUvB,EAAcwB,UAAQ,IAC5E,2BAAOF,KAAK,YAEd,4BAAK9B,GACP,2CAAcE,GACd,4CAAkBE,KC5BP6B,MA3Bf,WAAgB,IAAD,EACWpC,mBAAS,IADpB,mBACNqC,EADM,KACAC,EADA,KAcb,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,SACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,4BAAQC,QAjBE,WACdvB,IACGC,IAAI,yDACJC,MAAK,SAASC,GACbkB,EAAQlB,EAASG,SAElBI,OAAM,SAASC,GACdP,QAAQC,IAAIM,QAUZ,8BACA,4CAAeS,EAAKI,WCfRC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnC,MAAK,SAAAoC,GACJA,EAAaC,gBAEd7B,OAAM,SAAAC,GACLP,QAAQO,MAAMA,EAAM6B,c","file":"static/js/main.5537ee6b.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nconst Admin = () => {\n  const [config, setConfig] = useState({})\n  const [status, setStatus] = useState(\"\")\n  const [spyStatus, setSpyStatus] = useState(\"nao foi setado\")\n  const [resistanceStatus, setResistanceStatus] = useState(\"nao foi setado\")\n\n  useEffect(() => {\n    getCardStatus();\n  })\n\n  const handleChange = (event) => {\n    const value = event.target.value;\n    const name = event.target.name;\n    setConfig({...config,[name]: Number(value)})\n}\n\nconst handleSubmit = (e) => {\n  e.preventDefault();\n  axios\n    .post(\"https://resistencia-do-condado.herokuapp.com/api/game\", config)\n    .then(function(response) {\n      setStatus(response.data.status)\n    })\n    .catch(function(error) {\n      console.log(error);\n    });\n};\n\nconst getCardStatus = () => {\n  axios\n      .get(\"https://resistencia-do-condado.herokuapp.com/api/game/status\")\n      .then(function(response) {\n        // handle success\n        console.log(response);\n        setSpyStatus(response.data.spy.count);\n        setResistanceStatus(response.data.resistance.count)\n      })\n      .catch(function(error) {\n        // handle error\n        console.log(error);\n      })\n      .then(function() {\n        // always executed\n      });\n}\n\n  return (\n    <div>\n      <h2>Admin</h2>\n      <form  onSubmit={handleSubmit}>\n        <label>Espiões:</label>\n        <input type='number' name='spyCount' onChange={handleChange} required/>\n        <label>Resistencia:</label>\n        <input type='number' name='resistanceCount' onChange={handleChange} required/>\n        <input type='submit'/>\n      </form>\n      <h2>{status}</h2>\n    <h3>Espiões: {spyStatus}</h3>\n    <h3>Resistencia: {resistanceStatus}</h3>\n  </div>\n  );\n};\n\nexport default Admin;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport axios from \"axios\";\nimport { Switch, Route } from \"react-router-dom\";\nimport Admin from \"./Admin.js\";\n\nfunction App() {\n  const [game, setGame] = useState({});\n\n  const getCard = () => {\n    axios\n      .get(\"https://resistencia-do-condado.herokuapp.com/api/game\")\n      .then(function(response) {\n        setGame(response.data);\n      })\n      .catch(function(error) {\n        console.log(error);\n      })\n  };\n\n  return (\n    <Switch>\n      <Route path=\"/mari\">\n        <Admin />\n      </Route>\n      <Route path=\"/\">\n        <button onClick={getCard}>Descubra quem você é</button>\n        <h1>Voce é um {game.youAre}</h1>\n      </Route>\n    </Switch>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {\n  BrowserRouter as Router\n} from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}