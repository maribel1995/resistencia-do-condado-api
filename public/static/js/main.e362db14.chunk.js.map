{"version":3,"sources":["api/socket.js","pages/Room.js","App.js","serviceWorker.js","index.js"],"names":["socket","socketIOClient","process","REACT_APP_API_URL","Room","useContext","PlayersContext","players","useState","setStartGameStatus","YouContext","you","useEffect","emit","playerId","map","player","key","nickname","onClick","length","createContext","App","setNickname","setPlayers","setYou","once","id","Provider","value","path","type","name","onChange","event","target","to","on","Boolean","window","location","hostname","match","history","createBrowserHistory","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8TACaA,E,MAASC,GAAeC,mHAAYC,mBCoCjD,IAIeC,EAjCf,WAAiB,IAAD,EACgBC,qBAAWC,GAD3B,mBACPC,EADO,aAEgCC,oBAAS,IAFzC,mBAEUC,GAFV,aAGQJ,qBAAWK,GAHnB,mBAGPC,EAHO,UAKdC,qBAAU,WACR,OAAO,WACHZ,EAAOa,KAAK,cAAe,WAE9B,IAEH,IAMOC,GAAYP,EAAQ,IAAM,IAA1BO,SACP,OACI,6BACE,iDACA,4BACGP,EAAQQ,KAAI,SAACC,EAAQC,GAAT,OAAiB,wBAAIA,IAAKA,GAAMD,EAAOE,cAErDJ,IAAaH,EAAM,4BAAQQ,QAbhB,WACbZ,EAAQa,QAAS,GAChBX,GAAmB,KAWC,cAA+C,KCvB9DH,EAAiBe,wBAAc,IAC/BX,EAAaW,wBAAc,IAiDzBC,MAhDf,WAAgB,IAAD,EACmBd,mBAAS,IAD5B,mBACNU,EADM,KACIK,EADJ,OAEiBf,mBAAS,IAF1B,mBAEND,EAFM,KAEGiB,EAFH,OAGShB,mBAAS,IAHlB,mBAGNG,EAHM,KAGDc,EAHC,KA0Bb,OArBAb,qBAAU,WACRZ,EAAO0B,KAAK,gBAAgB,SAACC,GAC3BF,EAAOE,QAER,IAkBD,kBAACrB,EAAesB,SAAhB,CAAyBC,MAAO,CAACtB,EAASiB,IACxC,kBAACd,EAAWkB,SAAZ,CAAqBC,MAAO,CAAClB,EAAKc,IACpC,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOK,KAAK,SACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,8BACE,2CACA,2BAAOC,KAAK,OAAOC,KAAK,WAAWC,SAzBtB,SAACC,GACpB,IAAML,EAAQK,EAAMC,OAAON,MAC3BN,EAAYM,MAwBN,kBAAC,IAAD,CAAMO,GAAG,QAAQjB,QApBJ,WAClBnB,EAAOa,KAAK,gBAAkBK,GAC9BlB,EAAOa,KAAK,YAAc,UAC1Bb,EAAOqC,GAAG,eAAe,SAAC9B,GACzBiB,EAAWjB,QAgBP,gCCpCU+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCTAC,EAAUC,cAChBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAQJ,QAASA,GACf,kBAAC,EAAD,QAGJK,SAASC,eAAe,SDmHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e362db14.chunk.js","sourcesContent":["import socketIOClient from \"socket.io-client\";\nexport const socket = socketIOClient(process.env.REACT_APP_API_URL);\n","import React, { useState, useEffect, useContext } from \"react\";\nimport { socket } from '../api/socket';\nimport {PlayersContext, YouContext} from '../App';\n\nconst joinRoom = 'PLAYER_JOIN_ROOM';\nconst setNick = 'PLAYER_SET_NICK';\nconst updatePlayer = 'UPDATE_PLAYER';\n\nfunction Room() {\n  const [players, setPlayers] = useContext(PlayersContext);\n  const [startGameStatus, setStartGameStatus] = useState(false);\n  const [you, setYou] = useContext(YouContext);\n\n  useEffect(() => {\n    return function (){\n        socket.emit('unsubscribe', 'saiu');\n    };\n  }, []);\n  \n  const startGame = () => {\n    if(players.length >=2){\n        setStartGameStatus(true);\n    }\n  };\n\n  const {playerId} = players[0] || [];\n  return (\n      <div>\n        <h3>Jogadores na sala</h3>\n        <ul>\n          {players.map((player, key) => <li key={key}>{player.nickname}</li>)}\n        </ul>\n        {playerId === you ? <button onClick={startGame}>Come√ßar</button> : ''}\n      </div>\n  );\n}\n\nconst Game = () => {\n\n};\n\nexport default Room;\n","import React, { useState, useEffect, createContext } from \"react\";\nimport \"./App.css\";\nimport { Switch, Route, Link, Redirect } from \"react-router-dom\";\nimport { socket } from './api/socket';\nimport Room from './pages/Room';\n\nconst joinRoom = 'PLAYER_JOIN_ROOM';\nconst setNick = 'PLAYER_SET_NICK';\nconst updatePlayer = 'UPDATE_PLAYER';\nexport const PlayersContext = createContext([]);\nexport const YouContext = createContext([]);\nfunction App() {\n  const [nickname, setNickname] = useState('');\n  const [players, setPlayers] = useState([]);\n  const [you, setYou] = useState('');\n\n  useEffect(() => {\n    socket.once('send your id', (id) => {\n      setYou(id);\n    });\n  }, []);\n\n  const handleChange = (event) => {\n    const value = event.target.value;\n    setNickname(value);\n  };\n\n\n  const handleSubmit = () => {\n     socket.emit('user set nick',  nickname);\n     socket.emit('subscribe',  'entrou');\n     socket.on('update user', (players) => {\n      setPlayers(players);\n    });\n    \n  };\n  \n  return (\n    <PlayersContext.Provider value={[players, setPlayers]}>\n      <YouContext.Provider value={[you, setYou]}>\n    <Switch>\n      <Route path=\"/room\">\n        <Room />\n      </Route>\n      <Route path=\"/\">\n        <form>\n          <label>Nickname</label>\n          <input type='text' name='nickname' onChange={handleChange}></input>\n          <Link to=\"/room\" onClick={handleSubmit}>Click aqui para entrar</Link>\n        </form>\n      </Route>\n    </Switch>\n    </YouContext.Provider>\n    </PlayersContext.Provider>\n  );\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {\n  BrowserRouter as Router\n} from \"react-router-dom\";\nimport { createBrowserHistory } from \"history\";\nconst history = createBrowserHistory();\nReactDOM.render(\n  <React.StrictMode>\n    <Router history={history}>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}